# 工作流名称，将显示在 GitHub Actions 页面上
name: Publish

# 定义该工作流的触发方式：手动触发（通过 GitHub Actions 页面）
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tags to publish'  # 输入参数说明：要发布的标签
        required: true                  # 该输入为必填项
        default: 'latest'              # 默认标签为 latest

# 权限设置
permissions:
  contents: read     # 允许读取仓库内容（必须的权限）
  packages: write    # 虽然当前只用 Docker Hub，但可以保留写权限（GHCR 可用）

# 定义一个名为 push_to_registry 的 Job（作业）
jobs:
  push_to_registry:
    name: Push Docker image to registry   # Job 的显示名称
    runs-on: ubuntu-latest                # 使用 GitHub 托管的 Ubuntu 环境执行

    steps:
      # 第一步：拉取代码仓库
      - name: Check out the repo
        uses: actions/checkout@v3

      # 第二步：登录 Docker Hub，使用存储在 GitHub Secrets 中的用户名和访问令牌（推荐使用 Token 而不是密码）
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 第三步：设置 QEMU，用于跨平台（如在 x86 上构建 ARM 镜像）
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 第四步：启用 Buildx，支持多平台构建、高级缓存等功能
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 第五步：构建并推送 Docker 镜像到 Docker Hub
      - name: Build and push Docker image (Docker Hub)
        uses: docker/build-push-action@v5
        with:
          context: .                                # Docker 构建上下文目录（当前目录）
          file: ./mattermost/Dockerfile             # Dockerfile 文件路径
          platforms: linux/arm64                    # 构建目标平台（这里仅构建 ARM64 架构）
          push: true                                # 构建完成后推送到 Docker Hub
          tags: |                                   # 设置镜像标签
            in2udocker/mattermost-arm:latest
            in2udocker/mattermost-arm:${{ github.event.inputs.tag }}
          cache-from: type=gha                      # 启用 GitHub Actions 的构建缓存（加快后续构建）
          cache-to: type=gha,mode=max
